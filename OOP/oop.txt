What is OOP - OOP is programming paradigm, it is a set of rules, idea a concept basically it is a standard. We want to be able to present real life objects, real life entities togather with their charactaristics with their attributes and their behaviours, be able to explain those objects to our computer to represent those objects in our program.

 Real-life example - 
A car in real life have different charactaristics (attributes) 
Manufacturer - Volvo, ferrari, ford, toyota
Colour - 
Speed - 

Behaviour of a car - Drive, Accelerate, Open door, show speed, show fuel level

The idea of object oriented programming is to be able to represent that car from real life in your program. How to do that how to represent a car in programming. 
The awnser is by using classes, class is the building block of object oriented programming, it is a user defined data type. 

There are two data types user defined data types and predefined data types/built in data types.

pre-defined data types are -  float, Intiger, character, double, string

class is a little more complex data type - example in your program you need to represent user name of your user. In normal case you will create a string called the user name and input the name of the user to that.

But what if you want to save every information of your entire user in to one variable or in this case in to a class. Since a user has much more than your user name such as gender email adress, age, height, weight and so on. All these different types of variable all togathe will create a class that represent a user. Need to store information that is required to your specific program.

Access modifires - The three access modifires in C++ are three Private, Public and Protected
Private access modifires are not accessible out of your class they are basically hidden.
Public access modifires are accessible out of the class they are publically available.
Protected are some wahre between it comes in inheritance.

Class Method is basically a function, inside the class

//A method in object-oriented programming (OOP) is a procedure associated with a message and an object. An object consists of state data and behaviour, these compose an interface, which specifies how the object may be utilized by any of it's various consumers. A method is a behaviour of an object  parametrized by a consumer.


Constructor - Constructor is a special type of method that is invoked each time that an object of a class is created.  Default constructor is a term to describe a constructor that is automatically generated by your compiler.
Creating a constructor on my own
Rule 1- Constructor is just like an other method but it does not have a return type.
Rule 2- Constructor has the same name of the class that it belongs to. (Constructor of class Employee is Employee)
Rule 3 - Constructor are public
Rule 4 - Once you create your own constructor you loose that default constructor.

The four most important concepts in OOP

1. Encapsulation -
 The idea of encapsulation is bundelling, tying togather data, methods that operate on that data. So they are grouped togather in a class. We do this to prevent anyone or anythig outside of our calss to be directly access our data and intercat with it and modify it (it can be modifyied but not idrectly to do that you can provide your own way).

To do that I provide very specific public functions that other class can involk and that way intercat with the data. 

How do you access encapsulation, through it's methods (getters and setters)

2. Abstraction / abstract classes

Abstraction is hiding complex things behind a procedure that make those things simple,  
Ex - smart phone that can take pictures , you press a button and take an image.  For the componey that makes the phone it is more than that, all of that complexity when taking a picture is on the company side. you dont need to understand evertything to make a call or take an image. 
The company need to provide an interface to make it easy to the user. Hiding that complexity from the user is called abstraction. only the nice and simple interface is given to the user. 

We are the ones who making this calss, we should provide the complex logic functionalities, should produce simple and basic interface to the one who uses it.   

Abstract class only have one rule - which ever class deside to sign this contract that class will need to provide  implimentation for a method called ask for promotion. Make the abstract function in abstract class obligotori, to make a function obligotory need to make the function pure virtual function.
Which means that  who ever deside to sign this contract called that abstractemployee, that class that sign this contract will have to provide implimentation for the method AskForPromotion.

How the employee class sign this contract ? - We have implimented a contract also known as an abstract class. That abstract class only has one rule that is that pure virtual function ask for promotion. Which ever class signs the contract/inherit from abstract employee class, that class will have to provide eimplimentation for ask for promotion method. 

In this case Employee class is inheriting from our abstract employee, so our employee class  is signing that contract which means that class needs to provide implimentation for the method that is in that contract 

"If i use employee class I can involke this method here and I don't need to worry about the complexity of this method, don't need to worry about how this promotion is given or rejected That is the worry of the person who implimented the employee class" 

What is a virtual function - Virtual function in C++,  is a base class (parent class) member function that you can redfine in a derived class (sub class) to acive polymorphism. You can declare the function in the base class by the "virtual" keyword. 

3.Inheritance

The syntax for deriving a subclass from a superclass as follows
class SubclassName : inheritance-access-specifier SuperclassName {
   ......
};

There is a base classs also known as super class or parent class and their is derived class. And their is derived classs also known as child class or subclass. Parent class has different attributes and members. If the sub class deside to enharit the base class that moment that sub class become a child class,  from that the cild class will obtain all the attributes and behaviours from the base classs. And the derive class can have it's own members that are specific for that class only. 

Ex - A car have it's own attributes and behaviours, derived class of cars are Electric car or conventional car.  The electric is going to have all same attributes and behaviours of class car as well as the conventional car, but they are different between them.   Electrical car has it's own method called cahrge and attribute called battery statis. Conventional car has it's own method tank and attribute called fuel level. 

Is it possible to access properties of parent class from the sub class, without get and set method (adstraction) ?
No since the properties of the parent class is private with access modifires, properties with private access modifires are only accessibe within that class but anything with public access modifires are accessible outside of the class. 

How to make a parent class private property accessible from a sub class.
Protected access modifires properties can be accessed with the sub class methods without using get and set methods.

3.Polymorpism

What is Polymorpism (many-forms) in OOP it describes an object or method that has many forms.
"The most common use of polymorphisum is when a parent class reference is used refer to a child class object." 

In a case a specifc functionality/method which has a same name that exists in all parent and sub-classes but with different functionalities inside them.
(If the method only exists in parent class and the access modifire is public other sub-classes can access this method but considering the above case the method exist in all classes and their implimentations are different)

When virtual function is involked what naturally happens is that, "Hey can you please check if there is implimentation of this virtual function in my derived class if there is please execute that instead"

What  happens is that most derived version of this virtual function is executed. 

The difference between Abstraction and polymorphisum is that, in Abstraction is that one method that has complex process is executed in every sub class/child class referencing the paret or base class.
In Polymorphisum a method that has a same name but different instructions in different sub classes referanced by the main class is executing using pointers.
Pointers

